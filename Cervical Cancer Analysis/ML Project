{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3857,"sourceType":"datasetVersion","datasetId":2013}],"dockerImageVersionId":30558,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"This project will explore a dataframe consiting of patient PHI who have been screened for cervical cancer. In total, there are 36 attributes captured for each patient, one indicating whether the patient screened positive or negative for cervical cancer and other attributes regarding the patient's demographics as well as history with commonly known precursors for cervical cancer. Our ultimate goal is to explore how these various attributes contribute to a patient's likeliness to be diagnosed with cervical cancer as well as offer insight into the most impactful predispositions for a cervical cancer diagnosis later in life.Â¶","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = pd.read_csv('/kaggle/input/cervical-cancer-risk-classification/kag_risk_factors_cervical_cancer.csv')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:09.525841Z","iopub.execute_input":"2025-02-13T01:49:09.526132Z","iopub.status.idle":"2025-02-13T01:49:10.900731Z","shell.execute_reply.started":"2025-02-13T01:49:09.526089Z","shell.execute_reply":"2025-02-13T01:49:10.899603Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Transformation","metadata":{}},{"cell_type":"markdown","source":"##### To begin, we'll get to know our data a bit more by checking out the table features.","metadata":{}},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:10.903127Z","iopub.execute_input":"2025-02-13T01:49:10.903446Z","iopub.status.idle":"2025-02-13T01:49:10.911208Z","shell.execute_reply.started":"2025-02-13T01:49:10.903418Z","shell.execute_reply":"2025-02-13T01:49:10.910178Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Next, a basic way to chekc the \"completeness\" of your data is via heatmap which displays voids representing missing values in our df. ","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (10, 10))\nsns.heatmap(data.isnull(),cmap=\"cividis\", yticklabels=False)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:10.912838Z","iopub.execute_input":"2025-02-13T01:49:10.913432Z","iopub.status.idle":"2025-02-13T01:49:11.635793Z","shell.execute_reply.started":"2025-02-13T01:49:10.913391Z","shell.execute_reply":"2025-02-13T01:49:11.634627Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### This heatmap shows that our data is 100% complete, sounds nice but let's explore further to make sure. We can look into the type of data stored in our frame. ","metadata":{}},{"cell_type":"code","source":"data.dtypes","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.637265Z","iopub.execute_input":"2025-02-13T01:49:11.637585Z","iopub.status.idle":"2025-02-13T01:49:11.646365Z","shell.execute_reply.started":"2025-02-13T01:49:11.637557Z","shell.execute_reply":"2025-02-13T01:49:11.645133Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.647999Z","iopub.execute_input":"2025-02-13T01:49:11.648412Z","iopub.status.idle":"2025-02-13T01:49:11.686327Z","shell.execute_reply.started":"2025-02-13T01:49:11.648375Z","shell.execute_reply":"2025-02-13T01:49:11.685294Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Looking at the data types, we notice that most numerical values are classified as objects. This would make it a bit tough manipulating and structuring the data for analysis. In addition, we notice that missing values are represented with a question mark which will present some issues when trying to convert our data to numerical. ","metadata":{}},{"cell_type":"code","source":"data.isna()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.687664Z","iopub.execute_input":"2025-02-13T01:49:11.687993Z","iopub.status.idle":"2025-02-13T01:49:11.716255Z","shell.execute_reply.started":"2025-02-13T01:49:11.687966Z","shell.execute_reply":"2025-02-13T01:49:11.714868Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### We see above how every cell is considered filled due to the data type and inputs. ","metadata":{}},{"cell_type":"code","source":"data.head(10)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.720623Z","iopub.execute_input":"2025-02-13T01:49:11.721003Z","iopub.status.idle":"2025-02-13T01:49:11.746178Z","shell.execute_reply.started":"2025-02-13T01:49:11.720971Z","shell.execute_reply":"2025-02-13T01:49:11.745142Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.747383Z","iopub.execute_input":"2025-02-13T01:49:11.747698Z","iopub.status.idle":"2025-02-13T01:49:11.778185Z","shell.execute_reply.started":"2025-02-13T01:49:11.747654Z","shell.execute_reply":"2025-02-13T01:49:11.777065Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### So let's replace our question marks to our speacial floating point value which is readable to python. ","metadata":{}},{"cell_type":"code","source":"data = data.replace('?', np.NaN)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.779774Z","iopub.execute_input":"2025-02-13T01:49:11.780168Z","iopub.status.idle":"2025-02-13T01:49:11.795162Z","shell.execute_reply.started":"2025-02-13T01:49:11.780138Z","shell.execute_reply":"2025-02-13T01:49:11.794071Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.796621Z","iopub.execute_input":"2025-02-13T01:49:11.796978Z","iopub.status.idle":"2025-02-13T01:49:11.813847Z","shell.execute_reply.started":"2025-02-13T01:49:11.796946Z","shell.execute_reply":"2025-02-13T01:49:11.812769Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Finally, we can see how many cells have no data in them.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (10, 10))\nsns.heatmap(data.isnull(),cmap=\"cividis\", yticklabels=False)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:11.815383Z","iopub.execute_input":"2025-02-13T01:49:11.815862Z","iopub.status.idle":"2025-02-13T01:49:12.445441Z","shell.execute_reply.started":"2025-02-13T01:49:11.815822Z","shell.execute_reply":"2025-02-13T01:49:12.444288Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Now when rendering our heatmap, we can catch a general glimpse of how much data is present within each feature and begin to get an idea of which will be the most useful to use. In practice, substantially empty columns are dropped due to their limited use.","metadata":{}},{"cell_type":"code","source":"data.drop(['STDs: Time since first diagnosis','STDs: Time since last diagnosis'], axis = 1, inplace = True)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:12.446894Z","iopub.execute_input":"2025-02-13T01:49:12.447274Z","iopub.status.idle":"2025-02-13T01:49:12.456576Z","shell.execute_reply.started":"2025-02-13T01:49:12.447240Z","shell.execute_reply":"2025-02-13T01:49:12.455524Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize = (10, 10))\nsns.heatmap(data.isnull(),cmap=\"cividis\", yticklabels=False)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:12.457937Z","iopub.execute_input":"2025-02-13T01:49:12.458258Z","iopub.status.idle":"2025-02-13T01:49:13.057821Z","shell.execute_reply.started":"2025-02-13T01:49:12.458228Z","shell.execute_reply":"2025-02-13T01:49:13.056768Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Right off the bat, we note two columns pertaining to STD diagnosis that are mostly empty. Because we have no valuable data here, we can go ahead and drop these columns. Other columns are also missing some values, but not nearly as many so we can still possibly extract some insight from them.","metadata":{}},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.059182Z","iopub.execute_input":"2025-02-13T01:49:13.059568Z","iopub.status.idle":"2025-02-13T01:49:13.072521Z","shell.execute_reply.started":"2025-02-13T01:49:13.059532Z","shell.execute_reply":"2025-02-13T01:49:13.071425Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.073963Z","iopub.execute_input":"2025-02-13T01:49:13.074401Z","iopub.status.idle":"2025-02-13T01:49:13.085971Z","shell.execute_reply.started":"2025-02-13T01:49:13.074371Z","shell.execute_reply":"2025-02-13T01:49:13.084915Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.087093Z","iopub.execute_input":"2025-02-13T01:49:13.087395Z","iopub.status.idle":"2025-02-13T01:49:13.098943Z","shell.execute_reply.started":"2025-02-13T01:49:13.087362Z","shell.execute_reply":"2025-02-13T01:49:13.097756Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### We can now address the issues we noted initially with dtypes, a couple numerical values are classified as objects which would make analysis much more difficult, we can created a function to change every data type that's classified as an object to a float.","metadata":{}},{"cell_type":"code","source":"for col in data.columns:\n     if data[col].dtype == 'object':\n        data[col] = pd.to_numeric(data[col])","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.100312Z","iopub.execute_input":"2025-02-13T01:49:13.100638Z","iopub.status.idle":"2025-02-13T01:49:13.121577Z","shell.execute_reply.started":"2025-02-13T01:49:13.100613Z","shell.execute_reply":"2025-02-13T01:49:13.120399Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.dtypes","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.122888Z","iopub.execute_input":"2025-02-13T01:49:13.123185Z","iopub.status.idle":"2025-02-13T01:49:13.136455Z","shell.execute_reply.started":"2025-02-13T01:49:13.123155Z","shell.execute_reply":"2025-02-13T01:49:13.135338Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Now we see that any column containing numerical values are classified as an integer or float which will enable us to work with them a lot easier. The function changes any dtype of 'object' found in our df to a numerical dtype. ","metadata":{}},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.138244Z","iopub.execute_input":"2025-02-13T01:49:13.138674Z","iopub.status.idle":"2025-02-13T01:49:13.177537Z","shell.execute_reply.started":"2025-02-13T01:49:13.138638Z","shell.execute_reply":"2025-02-13T01:49:13.176300Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.178706Z","iopub.execute_input":"2025-02-13T01:49:13.178989Z","iopub.status.idle":"2025-02-13T01:49:13.193803Z","shell.execute_reply.started":"2025-02-13T01:49:13.178964Z","shell.execute_reply":"2025-02-13T01:49:13.192727Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Looking at our data we see most values in it now are non-null and can offer some insight as to what we are seeing in our patients. ","metadata":{}},{"cell_type":"code","source":"data.mean()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.195159Z","iopub.execute_input":"2025-02-13T01:49:13.195590Z","iopub.status.idle":"2025-02-13T01:49:13.212659Z","shell.execute_reply.started":"2025-02-13T01:49:13.195562Z","shell.execute_reply":"2025-02-13T01:49:13.211585Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Exploring the mean values for attributes can help us get to know our data in some cases. Above we see that our patients are on average 27 years old, have had 2.5 sexual partners, and have been pregnant 2 times. The mean for attributes represented in bool values offer insight into the positive rates we see within our sample size.","metadata":{}},{"cell_type":"code","source":"data.head(20)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.220261Z","iopub.execute_input":"2025-02-13T01:49:13.220614Z","iopub.status.idle":"2025-02-13T01:49:13.255504Z","shell.execute_reply.started":"2025-02-13T01:49:13.220585Z","shell.execute_reply":"2025-02-13T01:49:13.254322Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Visual Analysis ","metadata":{}},{"cell_type":"markdown","source":"##### Now that we have cleaned-up the dataframe we can finally build some two-dimensional visualizations on the trends there are.","metadata":{}},{"cell_type":"markdown","source":"##### So we recall how we replaced our question marks with null-values, for visualizations, null-values don't offer much insight and introduce gaps in our data making it difficult to read or work with. Let's work with the data we know and build visualization strictly on what we have.","metadata":{}},{"cell_type":"code","source":"data = data.dropna()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.257057Z","iopub.execute_input":"2025-02-13T01:49:13.257404Z","iopub.status.idle":"2025-02-13T01:49:13.269073Z","shell.execute_reply.started":"2025-02-13T01:49:13.257373Z","shell.execute_reply":"2025-02-13T01:49:13.267989Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Any downsides to dropping all NA values for visualization?","metadata":{}},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.270479Z","iopub.execute_input":"2025-02-13T01:49:13.271152Z","iopub.status.idle":"2025-02-13T01:49:13.289916Z","shell.execute_reply.started":"2025-02-13T01:49:13.271120Z","shell.execute_reply":"2025-02-13T01:49:13.288876Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head(10)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.291108Z","iopub.execute_input":"2025-02-13T01:49:13.291398Z","iopub.status.idle":"2025-02-13T01:49:13.320795Z","shell.execute_reply.started":"2025-02-13T01:49:13.291374Z","shell.execute_reply":"2025-02-13T01:49:13.319503Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(20, 10))\nsns.violinplot(data = data, x = 'Age', y = 'Number of sexual partners')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:13.322300Z","iopub.execute_input":"2025-02-13T01:49:13.323369Z","iopub.status.idle":"2025-02-13T01:49:14.376275Z","shell.execute_reply.started":"2025-02-13T01:49:13.323325Z","shell.execute_reply":"2025-02-13T01:49:14.375146Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(20, 10))\nsns.violinplot(data = data, x = 'Age', y = 'Number of sexual partners', showfliers = False)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:14.377609Z","iopub.execute_input":"2025-02-13T01:49:14.377968Z","iopub.status.idle":"2025-02-13T01:49:15.564004Z","shell.execute_reply.started":"2025-02-13T01:49:14.377937Z","shell.execute_reply":"2025-02-13T01:49:15.562924Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### This violin plot shows the distribution of sexual partners by age of our patients. We notice at age 16 there is an outlier reaching +30 partners this can be true or could have been an input mistake. To avoid it having a great affect on our data we can drop. ","metadata":{}},{"cell_type":"markdown","source":"##### To rid of outliers one can use IQR method or Z-score method.","metadata":{}},{"cell_type":"markdown","source":"##### Let's check out a plot showing how the ages of our patients are distributed - based on what we observed earlier in avg. age, we should see that the majority of our patients are in their mid to late 20's.","metadata":{}},{"cell_type":"code","source":"data.boxplot(column = 'Age', vert = False)\nplt.ylabel('Age')\nplt.title('Age Distribution')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:15.565429Z","iopub.execute_input":"2025-02-13T01:49:15.565829Z","iopub.status.idle":"2025-02-13T01:49:15.721155Z","shell.execute_reply.started":"2025-02-13T01:49:15.565793Z","shell.execute_reply":"2025-02-13T01:49:15.720219Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(data = data, x = 'Age')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Age Distribution')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:15.722281Z","iopub.execute_input":"2025-02-13T01:49:15.722667Z","iopub.status.idle":"2025-02-13T01:49:15.964899Z","shell.execute_reply.started":"2025-02-13T01:49:15.722630Z","shell.execute_reply":"2025-02-13T01:49:15.963744Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### To visually represent our mean we can tack on a vertical line indicating where our mean age falls. ","metadata":{}},{"cell_type":"code","source":"sns.histplot(data = data, x = 'Age')\nsns.set_style('darkgrid') \n\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Age Distribution')\n\navg_age = data['Age'].mean()\nplt.axvline(avg_age, color ='red', linestyle ='dashed', linewidth = 2,  label = f'Average Age: {avg_age:.2f}')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:15.966192Z","iopub.execute_input":"2025-02-13T01:49:15.966519Z","iopub.status.idle":"2025-02-13T01:49:16.289523Z","shell.execute_reply.started":"2025-02-13T01:49:15.966492Z","shell.execute_reply":"2025-02-13T01:49:16.288504Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(data = data, x = 'Num of pregnancies')\nsns.set_style('darkgrid') \n\nplt.xlabel('Num of pregnancies')\nplt.ylabel('Count')\nplt.title('Num of pregancies by count')\n\navg_preg = data['Num of pregnancies'].mean()\nplt.axvline(avg_preg, color ='red', linestyle ='dashed', linewidth = 2,  label = f'Average Num of Pregnancies: {avg_preg:.2f}')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:16.291523Z","iopub.execute_input":"2025-02-13T01:49:16.291987Z","iopub.status.idle":"2025-02-13T01:49:16.697799Z","shell.execute_reply.started":"2025-02-13T01:49:16.291931Z","shell.execute_reply":"2025-02-13T01:49:16.696715Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(2, 3))\nsns.histplot(data = data, x = 'Hormonal Contraceptives')\nplt.xticks([0,1], ['False','True'])\nplt.xlabel('Hormonal Contraceptives')\nplt.ylabel('Count')\nplt.title('Contraceptive Use')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:16.699037Z","iopub.execute_input":"2025-02-13T01:49:16.699350Z","iopub.status.idle":"2025-02-13T01:49:16.888482Z","shell.execute_reply.started":"2025-02-13T01:49:16.699324Z","shell.execute_reply":"2025-02-13T01:49:16.887255Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(data = data, x = 'Smokes', label = 'Population')\n\ncounts = data['Smokes'].value_counts()\nfor index, count in counts.items():\n    plt.text(index, count, str(count), ha = 'left', va = 'center')\n\nplt.xlabel('Smoker Status')\nplt.ylabel('Count')\nplt.title('Smoker Data')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:16.889918Z","iopub.execute_input":"2025-02-13T01:49:16.890252Z","iopub.status.idle":"2025-02-13T01:49:17.253242Z","shell.execute_reply.started":"2025-02-13T01:49:16.890223Z","shell.execute_reply":"2025-02-13T01:49:17.252213Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(data = data, x = 'Age', label = 'Population')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:17.254652Z","iopub.execute_input":"2025-02-13T01:49:17.255137Z","iopub.status.idle":"2025-02-13T01:49:17.646940Z","shell.execute_reply.started":"2025-02-13T01:49:17.255097Z","shell.execute_reply":"2025-02-13T01:49:17.645740Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Histogram showing non-smoking vs smoking population.","metadata":{}},{"cell_type":"code","source":"data['Age'].hist(bins = 10, color = 'red')  \nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Age Distribution Histogram')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:17.648490Z","iopub.execute_input":"2025-02-13T01:49:17.648973Z","iopub.status.idle":"2025-02-13T01:49:17.993448Z","shell.execute_reply.started":"2025-02-13T01:49:17.648931Z","shell.execute_reply":"2025-02-13T01:49:17.992303Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"smokeage = data.plot.scatter(x = 'Age', y = 'Smokes (years)', color = 'DarkBlue', label = 'Patient')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:17.994742Z","iopub.execute_input":"2025-02-13T01:49:17.995034Z","iopub.status.idle":"2025-02-13T01:49:18.338658Z","shell.execute_reply.started":"2025-02-13T01:49:17.995007Z","shell.execute_reply":"2025-02-13T01:49:18.337808Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"filter_smokes = data[data['Smokes (years)'] > 1]\nsmokeage = filter_smokes.plot.scatter(x = 'Age', y = 'Smokes (years)', color = 'DarkBlue', label = 'Patient')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:18.339863Z","iopub.execute_input":"2025-02-13T01:49:18.340167Z","iopub.status.idle":"2025-02-13T01:49:18.674033Z","shell.execute_reply.started":"2025-02-13T01:49:18.340139Z","shell.execute_reply":"2025-02-13T01:49:18.672880Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### This scatter only looks at records where smoking years is more than 1","metadata":{}},{"cell_type":"code","source":"data.plot.hexbin(x = \"Age\", y = \"Dx:Cancer\", gridsize = 15);","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:18.675347Z","iopub.execute_input":"2025-02-13T01:49:18.675659Z","iopub.status.idle":"2025-02-13T01:49:19.132116Z","shell.execute_reply.started":"2025-02-13T01:49:18.675632Z","shell.execute_reply":"2025-02-13T01:49:19.131013Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.plot.hexbin(x = \"Age\", y = \"IUD\", gridsize = 15);","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:19.133401Z","iopub.execute_input":"2025-02-13T01:49:19.133735Z","iopub.status.idle":"2025-02-13T01:49:19.719459Z","shell.execute_reply.started":"2025-02-13T01:49:19.133678Z","shell.execute_reply":"2025-02-13T01:49:19.718353Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.plot.hexbin(x = \"Age\", y = \"Smokes (years)\", gridsize = 15);","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:19.721212Z","iopub.execute_input":"2025-02-13T01:49:19.721632Z","iopub.status.idle":"2025-02-13T01:49:20.135785Z","shell.execute_reply.started":"2025-02-13T01:49:19.721594Z","shell.execute_reply":"2025-02-13T01:49:20.134726Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.plot.hexbin(x = \"Age\", y = \"Dx\", gridsize = 15)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:20.137194Z","iopub.execute_input":"2025-02-13T01:49:20.137588Z","iopub.status.idle":"2025-02-13T01:49:20.596467Z","shell.execute_reply.started":"2025-02-13T01:49:20.137550Z","shell.execute_reply":"2025-02-13T01:49:20.595405Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Increasing the contrast of the hexbin could perhaps offer better insight visually as to how our population is disperesed","metadata":{}},{"cell_type":"code","source":"data['hextest'] = 1\ndata.plot.hexbin(x = 'Age', y = 'hextest', gridsize = 15, cmap='YlOrRd', title='Population Age Density')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:20.597668Z","iopub.execute_input":"2025-02-13T01:49:20.597960Z","iopub.status.idle":"2025-02-13T01:49:21.086041Z","shell.execute_reply.started":"2025-02-13T01:49:20.597937Z","shell.execute_reply":"2025-02-13T01:49:21.084876Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Wondering how to show a density plot showing density of each age group?","metadata":{}},{"cell_type":"code","source":"data['Age'].plot.kde()\nplt.xlabel('Age')\nplt.ylabel('Density')\nplt.title('Population Age Distribution')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:21.088063Z","iopub.execute_input":"2025-02-13T01:49:21.088489Z","iopub.status.idle":"2025-02-13T01:49:21.449956Z","shell.execute_reply.started":"2025-02-13T01:49:21.088451Z","shell.execute_reply":"2025-02-13T01:49:21.448777Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Kernel Desnity Plot showing population distribution.","metadata":{}},{"cell_type":"code","source":"health_metrics = ['Age','Number of sexual partners','Dx', 'IUD']\n\nfor metric in health_metrics:\n    plt.figure(figsize=(6, 4))\n    plt.hist(data[data['Dx'] == 1][metric], bins = 20, alpha = 1, color = 'red', label='With Cervical Cancer')\n    plt.hist(data[data['Dx'] == 0][metric], bins = 20, alpha = 0.5, color = 'blue', label='Without Cervical Cancer')\n    plt.xlabel(metric)\n    plt.ylabel('Count')\n    plt.title(f'Distribution of {metric} by Cervical Cancer Status')\n    plt.legend()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:21.451397Z","iopub.execute_input":"2025-02-13T01:49:21.451840Z","iopub.status.idle":"2025-02-13T01:49:23.042287Z","shell.execute_reply.started":"2025-02-13T01:49:21.451799Z","shell.execute_reply":"2025-02-13T01:49:23.041127Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"from pandas.plotting import scatter_matrix\nscatter_matrix(data, alpha=0.2, figsize=(6, 6), diagonal=\"kde\");","metadata":{"execution":{"iopub.status.busy":"2023-10-31T14:58:46.351195Z","iopub.execute_input":"2023-10-31T14:58:46.351629Z","iopub.status.idle":"2023-10-31T14:59:16.339487Z","shell.execute_reply.started":"2023-10-31T14:58:46.351598Z","shell.execute_reply":"2023-10-31T14:59:16.337916Z"}}},{"cell_type":"code","source":"health_stat = ['Num of pregnancies', 'Age']\n\nfor metric in health_stat:\n    plt.figure(figsize=(8, 4))\n    plt.scatter(data[data['Dx'] == 1]['Dx'], data[data['Dx'] == 1][metric], c='red', label='With Cervical Cancer')\n    plt.scatter(data[data['Dx'] == 0]['Dx'], data[data['Dx'] == 0][metric], c='blue', label='Without Cervical Cancer')\n    plt.xlabel('Cervical Cancer Status')\n    plt.ylabel(metric)\n    plt.title(f'Distribution of {metric} by Cervical Cancer Status')\n    plt.legend()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:23.043959Z","iopub.execute_input":"2025-02-13T01:49:23.044296Z","iopub.status.idle":"2025-02-13T01:49:23.775954Z","shell.execute_reply.started":"2025-02-13T01:49:23.044259Z","shell.execute_reply":"2025-02-13T01:49:23.774871Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"health_stat = ['Num of pregnancies']\n\nfor metric in health_stat:\n    plt.figure(figsize=(8, 4))\n    plt.scatter(data[data['Dx'] == 1][health_stat], [1] * sum(data['Dx'] == 1), c = 'red', label = 'With Cervical Cancer', marker='o')\n    plt.scatter(data[data['Dx'] == 0][health_stat], [0] * sum(data['Dx'] == 0), c = 'blue', label = 'Without Cervical Cancer', marker='x')\n    plt.yticks([0, 1], ['Without Cervical Cancer', 'With Cervical Cancer'])\n    plt.xlabel(health_stat)\n    plt.title(f'Relation of {health_stat} to Cervical Cancer Diagnosis')\n    plt.legend()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:23.777216Z","iopub.execute_input":"2025-02-13T01:49:23.777525Z","iopub.status.idle":"2025-02-13T01:49:24.078037Z","shell.execute_reply.started":"2025-02-13T01:49:23.777498Z","shell.execute_reply":"2025-02-13T01:49:24.076863Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dxage = data.plot.scatter(x = 'Age', y = 'Dx', color = 'DarkGreen', label = 'Patients');","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:24.079647Z","iopub.execute_input":"2025-02-13T01:49:24.079970Z","iopub.status.idle":"2025-02-13T01:49:24.460226Z","shell.execute_reply.started":"2025-02-13T01:49:24.079943Z","shell.execute_reply":"2025-02-13T01:49:24.459127Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"filter_dx = data[data['Dx'] == 0]\ndxage = filter_dx.plot.scatter('Age', y = 'Smokes (packs/year)', color = 'DarkBlue', label = 'Patients')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:24.461746Z","iopub.execute_input":"2025-02-13T01:49:24.462139Z","iopub.status.idle":"2025-02-13T01:49:24.994237Z","shell.execute_reply.started":"2025-02-13T01:49:24.462101Z","shell.execute_reply":"2025-02-13T01:49:24.992832Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"filter_dx = data[data['Dx'] == 1]\ndxage = filter_dx.plot.scatter('Age', y = 'Smokes (packs/year)', color = 'DarkBlue', label = 'Patients')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:24.995740Z","iopub.execute_input":"2025-02-13T01:49:24.996170Z","iopub.status.idle":"2025-02-13T01:49:25.304050Z","shell.execute_reply.started":"2025-02-13T01:49:24.996132Z","shell.execute_reply":"2025-02-13T01:49:25.303156Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(len(data[data['Dx'] == 1]))","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.305422Z","iopub.execute_input":"2025-02-13T01:49:25.305825Z","iopub.status.idle":"2025-02-13T01:49:25.312734Z","shell.execute_reply.started":"2025-02-13T01:49:25.305790Z","shell.execute_reply":"2025-02-13T01:49:25.311625Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.corr()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.313860Z","iopub.execute_input":"2025-02-13T01:49:25.314185Z","iopub.status.idle":"2025-02-13T01:49:25.365057Z","shell.execute_reply.started":"2025-02-13T01:49:25.314158Z","shell.execute_reply":"2025-02-13T01:49:25.363984Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### What can we do with null-values? Null values can still hold some value, although no present data we can pass a function which replaces any null value with a statistical measure or constant. This will especially be valuable when performing analysis and, more specifically, applying machine learning which does not handle missing values well.","metadata":{}},{"cell_type":"markdown","source":"### Logistical Regression Modeling","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.366515Z","iopub.execute_input":"2025-02-13T01:49:25.366923Z","iopub.status.idle":"2025-02-13T01:49:25.665279Z","shell.execute_reply.started":"2025-02-13T01:49:25.366888Z","shell.execute_reply":"2025-02-13T01:49:25.664337Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/cervical-cancer-risk-classification/kag_risk_factors_cervical_cancer.csv')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.667035Z","iopub.execute_input":"2025-02-13T01:49:25.667433Z","iopub.status.idle":"2025-02-13T01:49:25.682027Z","shell.execute_reply.started":"2025-02-13T01:49:25.667398Z","shell.execute_reply":"2025-02-13T01:49:25.680566Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\n\ndata = data.replace('?', np.NaN)\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.683363Z","iopub.execute_input":"2025-02-13T01:49:25.683786Z","iopub.status.idle":"2025-02-13T01:49:25.837730Z","shell.execute_reply.started":"2025-02-13T01:49:25.683630Z","shell.execute_reply":"2025-02-13T01:49:25.836495Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"missing_values = data.columns[data.isnull().any()].tolist()\nimputer = SimpleImputer(strategy = 'mean')\ndata[missing_values] = imputer.fit_transform(data[missing_values])","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.838952Z","iopub.execute_input":"2025-02-13T01:49:25.839274Z","iopub.status.idle":"2025-02-13T01:49:25.865834Z","shell.execute_reply.started":"2025-02-13T01:49:25.839247Z","shell.execute_reply":"2025-02-13T01:49:25.864734Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"correlation_matrix = data.corr()\ncorrelation_dx = correlation_matrix","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.867114Z","iopub.execute_input":"2025-02-13T01:49:25.867452Z","iopub.status.idle":"2025-02-13T01:49:25.877865Z","shell.execute_reply.started":"2025-02-13T01:49:25.867415Z","shell.execute_reply":"2025-02-13T01:49:25.876626Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(20, 10))\nsns.heatmap(correlation_dx, annot = True, cmap = 'coolwarm', fmt = \".2f\")\nplt.title(\"Correlation Heatmap\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:25.879242Z","iopub.execute_input":"2025-02-13T01:49:25.879566Z","iopub.status.idle":"2025-02-13T01:49:28.984251Z","shell.execute_reply.started":"2025-02-13T01:49:25.879538Z","shell.execute_reply":"2025-02-13T01:49:28.982962Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"correlation_matrix['Dx'].abs().sort_values(ascending = False)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:28.985844Z","iopub.execute_input":"2025-02-13T01:49:28.986270Z","iopub.status.idle":"2025-02-13T01:49:28.996876Z","shell.execute_reply.started":"2025-02-13T01:49:28.986222Z","shell.execute_reply":"2025-02-13T01:49:28.995766Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"corr_columns = ['Dx', 'Age', 'Dx:HPV', 'Dx:CIN', 'IUD', 'Smokes']\ndx_data = data[corr_columns]","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:28.998429Z","iopub.execute_input":"2025-02-13T01:49:28.998964Z","iopub.status.idle":"2025-02-13T01:49:29.011522Z","shell.execute_reply.started":"2025-02-13T01:49:28.998927Z","shell.execute_reply":"2025-02-13T01:49:29.010513Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dx_data.corr()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.013021Z","iopub.execute_input":"2025-02-13T01:49:29.013430Z","iopub.status.idle":"2025-02-13T01:49:29.035867Z","shell.execute_reply.started":"2025-02-13T01:49:29.013400Z","shell.execute_reply":"2025-02-13T01:49:29.034816Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Feature Selection","metadata":{"execution":{"iopub.status.busy":"2023-11-15T19:00:57.771875Z","iopub.execute_input":"2023-11-15T19:00:57.772269Z","iopub.status.idle":"2023-11-15T19:00:57.777548Z","shell.execute_reply.started":"2023-11-15T19:00:57.772239Z","shell.execute_reply":"2023-11-15T19:00:57.776183Z"}}},{"cell_type":"code","source":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.037134Z","iopub.execute_input":"2025-02-13T01:49:29.037488Z","iopub.status.idle":"2025-02-13T01:49:29.088216Z","shell.execute_reply.started":"2025-02-13T01:49:29.037460Z","shell.execute_reply":"2025-02-13T01:49:29.087052Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.089495Z","iopub.execute_input":"2025-02-13T01:49:29.089834Z","iopub.status.idle":"2025-02-13T01:49:29.129948Z","shell.execute_reply.started":"2025-02-13T01:49:29.089806Z","shell.execute_reply":"2025-02-13T01:49:29.128708Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = data.iloc[:,0:29]\ny = data.iloc[:,-6]","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.131432Z","iopub.execute_input":"2025-02-13T01:49:29.131793Z","iopub.status.idle":"2025-02-13T01:49:29.138464Z","shell.execute_reply.started":"2025-02-13T01:49:29.131764Z","shell.execute_reply":"2025-02-13T01:49:29.137036Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Univariate Selection","metadata":{}},{"cell_type":"code","source":"feature_select = SelectKBest(score_func = chi2, k = 10)\nbest_fit = feature_select.fit(X,y)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.140080Z","iopub.execute_input":"2025-02-13T01:49:29.140540Z","iopub.status.idle":"2025-02-13T01:49:29.164988Z","shell.execute_reply.started":"2025-02-13T01:49:29.140498Z","shell.execute_reply":"2025-02-13T01:49:29.163534Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dfscores = pd.DataFrame(best_fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.166286Z","iopub.execute_input":"2025-02-13T01:49:29.166599Z","iopub.status.idle":"2025-02-13T01:49:29.172359Z","shell.execute_reply.started":"2025-02-13T01:49:29.166574Z","shell.execute_reply":"2025-02-13T01:49:29.170951Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"feature_scores = pd.concat([dfcolumns, dfscores], axis = 1)\nfeature_scores.columns = ['Column', 'Score']","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.174114Z","iopub.execute_input":"2025-02-13T01:49:29.174571Z","iopub.status.idle":"2025-02-13T01:49:29.184446Z","shell.execute_reply.started":"2025-02-13T01:49:29.174531Z","shell.execute_reply":"2025-02-13T01:49:29.183057Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"feature_scores","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.195042Z","iopub.execute_input":"2025-02-13T01:49:29.195750Z","iopub.status.idle":"2025-02-13T01:49:29.211376Z","shell.execute_reply.started":"2025-02-13T01:49:29.195679Z","shell.execute_reply":"2025-02-13T01:49:29.210068Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(feature_scores.nlargest(10,'Score'))","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.212912Z","iopub.execute_input":"2025-02-13T01:49:29.213346Z","iopub.status.idle":"2025-02-13T01:49:29.229362Z","shell.execute_reply.started":"2025-02-13T01:49:29.213306Z","shell.execute_reply":"2025-02-13T01:49:29.227989Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Find 10 best scores for features","metadata":{}},{"cell_type":"markdown","source":"##### Feature Importance ","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\n\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.230776Z","iopub.execute_input":"2025-02-13T01:49:29.231186Z","iopub.status.idle":"2025-02-13T01:49:29.571109Z","shell.execute_reply.started":"2025-02-13T01:49:29.231148Z","shell.execute_reply":"2025-02-13T01:49:29.569781Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(model.feature_importances_)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.573016Z","iopub.execute_input":"2025-02-13T01:49:29.573350Z","iopub.status.idle":"2025-02-13T01:49:29.587222Z","shell.execute_reply.started":"2025-02-13T01:49:29.573322Z","shell.execute_reply":"2025-02-13T01:49:29.585957Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"feature_importance = pd.Series(model.feature_importances_, index = X.columns)\nfeature_importance.nlargest(10).plot(kind = 'barh')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.588902Z","iopub.execute_input":"2025-02-13T01:49:29.589333Z","iopub.status.idle":"2025-02-13T01:49:29.931914Z","shell.execute_reply.started":"2025-02-13T01:49:29.589304Z","shell.execute_reply":"2025-02-13T01:49:29.930801Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Correlation Matrix Heatmap","metadata":{}},{"cell_type":"code","source":"correlation_matrix = data.corr()\ntop_corr_features = correlation_matrix.index\nplt.figure(figsize = (20,20))\ng = sns.heatmap(data[top_corr_features].corr(), annot = True, cmap = 'RdYlGn')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:29.933145Z","iopub.execute_input":"2025-02-13T01:49:29.933456Z","iopub.status.idle":"2025-02-13T01:49:34.063403Z","shell.execute_reply.started":"2025-02-13T01:49:29.933429Z","shell.execute_reply":"2025-02-13T01:49:34.062370Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Model Building - Logistical Regression ","metadata":{}},{"cell_type":"code","source":"feature_columns = ['Dx:HPV', 'Dx:CIN', 'Hormonal Contraceptives (years)', 'Age', 'First sexual intercourse', 'Num of pregnancies', 'Smokes', 'Smokes (packs/year)', 'Number of sexual partners']\nX = data[feature_columns]\ny = data.Dx","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.064814Z","iopub.execute_input":"2025-02-13T01:49:34.065202Z","iopub.status.idle":"2025-02-13T01:49:34.073180Z","shell.execute_reply.started":"2025-02-13T01:49:34.065167Z","shell.execute_reply":"2025-02-13T01:49:34.071844Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 16)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.074522Z","iopub.execute_input":"2025-02-13T01:49:34.074854Z","iopub.status.idle":"2025-02-13T01:49:34.089557Z","shell.execute_reply.started":"2025-02-13T01:49:34.074827Z","shell.execute_reply":"2025-02-13T01:49:34.088477Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(solver = 'liblinear', max_iter = 1000)\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.091060Z","iopub.execute_input":"2025-02-13T01:49:34.091789Z","iopub.status.idle":"2025-02-13T01:49:34.111584Z","shell.execute_reply.started":"2025-02-13T01:49:34.091747Z","shell.execute_reply":"2025-02-13T01:49:34.110430Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Reached max number of iterations with random_state = 16, switched to solver = 'liblinear' with max_iter = 1000. What's going on here?","metadata":{}},{"cell_type":"code","source":"from sklearn import metrics\n\nconf_matrix = metrics.confusion_matrix(y_test, y_pred)\nconf_matrix","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.113142Z","iopub.execute_input":"2025-02-13T01:49:34.113498Z","iopub.status.idle":"2025-02-13T01:49:34.123389Z","shell.execute_reply.started":"2025-02-13T01:49:34.113469Z","shell.execute_reply":"2025-02-13T01:49:34.122405Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class_names = [0,1] \nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n\nsns.heatmap(pd.DataFrame(conf_matrix), annot = True, cmap = \"YlGnBu\" ,fmt = 'g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y = 1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.124658Z","iopub.execute_input":"2025-02-13T01:49:34.125034Z","iopub.status.idle":"2025-02-13T01:49:34.407788Z","shell.execute_reply.started":"2025-02-13T01:49:34.125007Z","shell.execute_reply":"2025-02-13T01:49:34.406572Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Confusion Matrix above shows how well our model predicts if patient has cervical cancer or does not. ","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\ntarget_names = ['Negative Dx', 'Positive Dx']\nprint(classification_report(y_test, y_pred, target_names = target_names))","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.409038Z","iopub.execute_input":"2025-02-13T01:49:34.409338Z","iopub.status.idle":"2025-02-13T01:49:34.425861Z","shell.execute_reply.started":"2025-02-13T01:49:34.409313Z","shell.execute_reply":"2025-02-13T01:49:34.424573Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##### Receiver Operating Characteristic (ROC) - plot of true positive rate against false positive rate.","metadata":{}},{"cell_type":"code","source":"y_pred_proba = logreg.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label = \"data 1, auc=\"+str(auc))\nplt.legend(loc = 4)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.427271Z","iopub.execute_input":"2025-02-13T01:49:34.427701Z","iopub.status.idle":"2025-02-13T01:49:34.658704Z","shell.execute_reply.started":"2025-02-13T01:49:34.427644Z","shell.execute_reply":"2025-02-13T01:49:34.657674Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###Decision Tree Classifier ","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier, export_text","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.660132Z","iopub.execute_input":"2025-02-13T01:49:34.660879Z","iopub.status.idle":"2025-02-13T01:49:34.665834Z","shell.execute_reply.started":"2025-02-13T01:49:34.660838Z","shell.execute_reply":"2025-02-13T01:49:34.664568Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfeature_columns = ['Dx:HPV', 'Dx:CIN', 'Hormonal Contraceptives (years)', 'Age', 'First sexual intercourse', 'Num of pregnancies', 'Smokes', 'Smokes (packs/year)', 'Number of sexual partners']\nX = data[feature_columns]\ny = data.Dx\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 16)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.667360Z","iopub.execute_input":"2025-02-13T01:49:34.667767Z","iopub.status.idle":"2025-02-13T01:49:34.681909Z","shell.execute_reply.started":"2025-02-13T01:49:34.667731Z","shell.execute_reply":"2025-02-13T01:49:34.680841Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"clf = DecisionTreeClassifier(random_state=42)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.683430Z","iopub.execute_input":"2025-02-13T01:49:34.683777Z","iopub.status.idle":"2025-02-13T01:49:34.698425Z","shell.execute_reply.started":"2025-02-13T01:49:34.683749Z","shell.execute_reply":"2025-02-13T01:49:34.697426Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"clf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.699746Z","iopub.execute_input":"2025-02-13T01:49:34.700076Z","iopub.status.idle":"2025-02-13T01:49:34.718022Z","shell.execute_reply.started":"2025-02-13T01:49:34.700040Z","shell.execute_reply":"2025-02-13T01:49:34.716924Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy = clf.score(X_test, y_test)\nprint(f\"Accuracy: {accuracy:.2f}\")","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.719511Z","iopub.execute_input":"2025-02-13T01:49:34.720589Z","iopub.status.idle":"2025-02-13T01:49:34.729581Z","shell.execute_reply.started":"2025-02-13T01:49:34.720546Z","shell.execute_reply":"2025-02-13T01:49:34.728579Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tree_rules = export_text(clf, feature_names = feature_columns)\nprint(\"Decision Tree Rules:\")\nprint(tree_rules)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.731007Z","iopub.execute_input":"2025-02-13T01:49:34.731423Z","iopub.status.idle":"2025-02-13T01:49:34.740754Z","shell.execute_reply.started":"2025-02-13T01:49:34.731385Z","shell.execute_reply":"2025-02-13T01:49:34.739523Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###Comapring ROC and AUC","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import make_classification\n\nlogreg_probs = logreg.predict_proba(X_test)[:, 1]\ntree_probs = clf.predict_proba(X_test)[:, 1]\n\nfpr_logreg, tpr_logreg, _ = roc_curve(y_test, logreg_probs)\nroc_auc_logreg = auc(fpr_logreg, tpr_logreg)\n\nfpr_tree, tpr_tree, _ = roc_curve(y_test, tree_probs)\nroc_auc_tree = auc(fpr_tree, tpr_tree)\n\nplt.figure(figsize=(8, 6))\nplt.plot(fpr_logreg, tpr_logreg, color='blue', lw=2, label=f'Logistic Regression (AUC = {roc_auc_logreg:.2f})')\nplt.plot(fpr_tree, tpr_tree, color='green', lw=2, label=f'Decision Tree (AUC = {roc_auc_tree:.2f})')\nplt.plot([0, 1], [0, 1], color='black', lw=2, linestyle='--', label='Random')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:34.742068Z","iopub.execute_input":"2025-02-13T01:49:34.742402Z","iopub.status.idle":"2025-02-13T01:49:35.190344Z","shell.execute_reply.started":"2025-02-13T01:49:34.742365Z","shell.execute_reply":"2025-02-13T01:49:35.189225Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Precision Recall Curve ","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_curve, auc, average_precision_score\nimport matplotlib.pyplot as plt\n\n# Compute precision-recall curve and AUC for Logistic Regression\nprecision_logreg, recall_logreg, _ = precision_recall_curve(y_test, logreg_probs)\naverage_precision_logreg = average_precision_score(y_test, logreg_probs)\n\n# Compute precision-recall curve and AUC for Decision Tree\nprecision_tree, recall_tree, _ = precision_recall_curve(y_test, tree_probs)\naverage_precision_tree = average_precision_score(y_test, tree_probs)\n\n# Plot precision-recall curves\nplt.figure(figsize=(8, 6))\nplt.step(recall_logreg, precision_logreg, color='blue', where='post', label=f'Logistic Regression (AP = {average_precision_logreg:.2f})')\nplt.step(recall_tree, precision_tree, color='green', where='post', label=f'Decision Tree (AP = {average_precision_tree:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc='upper right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.191681Z","iopub.execute_input":"2025-02-13T01:49:35.192039Z","iopub.status.idle":"2025-02-13T01:49:35.472973Z","shell.execute_reply.started":"2025-02-13T01:49:35.192010Z","shell.execute_reply":"2025-02-13T01:49:35.471910Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Naive Bayes ","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, classification_report","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.474353Z","iopub.execute_input":"2025-02-13T01:49:35.474773Z","iopub.status.idle":"2025-02-13T01:49:35.489088Z","shell.execute_reply.started":"2025-02-13T01:49:35.474737Z","shell.execute_reply":"2025-02-13T01:49:35.487885Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data ","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.490511Z","iopub.execute_input":"2025-02-13T01:49:35.491383Z","iopub.status.idle":"2025-02-13T01:49:35.521754Z","shell.execute_reply.started":"2025-02-13T01:49:35.491341Z","shell.execute_reply":"2025-02-13T01:49:35.520610Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### XGBoost - another method to identifying feature importance.","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.523165Z","iopub.execute_input":"2025-02-13T01:49:35.523506Z","iopub.status.idle":"2025-02-13T01:49:35.817822Z","shell.execute_reply.started":"2025-02-13T01:49:35.523477Z","shell.execute_reply":"2025-02-13T01:49:35.816658Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.819170Z","iopub.execute_input":"2025-02-13T01:49:35.819585Z","iopub.status.idle":"2025-02-13T01:49:35.828524Z","shell.execute_reply.started":"2025-02-13T01:49:35.819550Z","shell.execute_reply":"2025-02-13T01:49:35.827202Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test, label=y_test)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.830030Z","iopub.execute_input":"2025-02-13T01:49:35.830449Z","iopub.status.idle":"2025-02-13T01:49:35.895908Z","shell.execute_reply.started":"2025-02-13T01:49:35.830412Z","shell.execute_reply":"2025-02-13T01:49:35.895080Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"params = {\n    'objective': 'binary:logistic',  \n    'eval_metric': 'logloss',         \n    'eta': 0.3,                       \n    'max_depth': 3                    \n}\n\nnum_rounds = 100  \nmodel = xgb.train(params, dtrain, num_rounds)\n\ny_pred_prob = model.predict(dtest)\ny_pred = [1 if prob > 0.5 else 0 for prob in y_pred_prob]\n\naccuracy = accuracy_score(y_test, y_pred)\nclassification_rep = classification_report(y_test, y_pred)\n\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Classification Report:\\n\", classification_rep)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:35.897039Z","iopub.execute_input":"2025-02-13T01:49:35.897655Z","iopub.status.idle":"2025-02-13T01:49:36.124249Z","shell.execute_reply.started":"2025-02-13T01:49:35.897619Z","shell.execute_reply":"2025-02-13T01:49:36.123230Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import roc_curve, roc_auc_score\ny_pred_proba = model.predict(dtest)\nfpr, tpr, _ = roc_curve(y_test, y_pred_proba)\nauc = roc_auc_score(y_test, y_pred_proba)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:36.125523Z","iopub.execute_input":"2025-02-13T01:49:36.125848Z","iopub.status.idle":"2025-02-13T01:49:36.134729Z","shell.execute_reply.started":"2025-02-13T01:49:36.125821Z","shell.execute_reply":"2025-02-13T01:49:36.133552Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"AUC Score:\", auc)","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:36.136169Z","iopub.execute_input":"2025-02-13T01:49:36.137006Z","iopub.status.idle":"2025-02-13T01:49:36.152531Z","shell.execute_reply.started":"2025-02-13T01:49:36.136967Z","shell.execute_reply":"2025-02-13T01:49:36.151331Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 8))\nplt.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {auc:.2f}')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:49:36.153896Z","iopub.execute_input":"2025-02-13T01:49:36.154301Z","iopub.status.idle":"2025-02-13T01:49:36.492626Z","shell.execute_reply.started":"2025-02-13T01:49:36.154250Z","shell.execute_reply":"2025-02-13T01:49:36.491441Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!apt-get install git","metadata":{"execution":{"iopub.status.busy":"2025-02-13T01:52:26.298396Z","iopub.execute_input":"2025-02-13T01:52:26.298851Z","iopub.status.idle":"2025-02-13T01:52:29.951615Z","shell.execute_reply.started":"2025-02-13T01:52:26.298819Z","shell.execute_reply":"2025-02-13T01:52:29.950206Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!git config --global user.name \"rod-avi\"\n!git config --global user.email \"rod.avitia@gmail.com\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-13T01:53:35.711042Z","iopub.execute_input":"2025-02-13T01:53:35.711506Z","iopub.status.idle":"2025-02-13T01:53:37.874420Z","shell.execute_reply.started":"2025-02-13T01:53:35.711467Z","shell.execute_reply":"2025-02-13T01:53:37.872814Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!git clone https://github.com/rod_avi/cervical_cancer.git\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-13T01:55:14.047415Z","iopub.execute_input":"2025-02-13T01:55:14.047919Z","iopub.status.idle":"2025-02-13T01:55:47.448207Z","shell.execute_reply.started":"2025-02-13T01:55:14.047878Z","shell.execute_reply":"2025-02-13T01:55:47.446908Z"}},"outputs":[],"execution_count":null}]}